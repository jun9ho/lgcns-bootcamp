
-- DDL(DATA DEFINITION LANGUAGE) : CREATE, DROP, ALTER 
-- TABLE (CONSTRAINT) : NOT NULL, UNIQUE, PRIMARY KEY, FOREIGN KEY, CHECK 
-- VIEW : 읽기전용(권한, 복잡한 질의어를 단순) 


/*

CREATE TABLE TABLE_NAME(
	COLUMN_NAME DATATYPE [DEFAULT EXPR] [COLUMN CONSTRAINT],
	[TABLE CONSTRAINT]	
) ;

CREATE VIEW VIEW_NAME AS
SUB_QUERY 

*/

-- DML(DATA MANIPULATION LANGUAGE) : INSERT, UPDATE, DELETE
 
 
DROP TABLE IF EXISTS TABLE_NAME ; 

CREATE TABLE DUMMY_TBL(
	USER_ID		VARCHAR(50) PRIMARY KEY, -- COLUMN LEVEL CONSTRAINT 
	USER_NAME	VARCHAR(50) NOT NULL,
	BIRTH_YEAR  DATE 			DEFAULT SYSDATE() ,
	ADDRESS		VARCHAR(50),
	MOBILE01		CHAR(3),
	MOBILE02    CHAR(9),
	HEIGHT		INT,
	PRIMARY KEY(컬럼명) -- TABLE LEVEL CONSTRAINT 
);




DROP TABLE IF EXISTS JOB_TBL ;
CREATE TABLE JOB_TBL(
	JOB_ID 		CHAR(3),
	JOB_TITLE	VARCHAR(100),
	PRIMARY KEY(JOB_ID) 
); 

SELECT	*
FROM		JOB_TBL ;

INSERT INTO JOB_TBL(JOB_ID, JOB_TITLE) VALUES
('J1', '대표이사'),
('J2', '부장'),
('J3', '차장') ;
 
INSERT INTO JOB_TBL(JOB_ID, JOB_TITLE) VALUES('J4', '대리');
INSERT INTO JOB_TBL(JOB_ID, JOB_TITLE) VALUES('J5', '사원');

-- ERROR(중복, NULL) 
-- INSERT INTO JOB_TBL(JOB_ID, JOB_TITLE) VALUES('J5', '사원');
-- INSERT INTO JOB_TBL(JOB_ID, JOB_TITLE) VALUES(NULL, '사원');

SELECT	*
FROM		job_tbl 
WHERE		JOB_ID.TRIM() = 'J1' ;




DROP TABLE IF EXISTS DEPT_TBL ;
CREATE TABLE DEPT_TBL(
	DEPT_ID 		CHAR(2) PRIMARY KEY,
	DEPT_NAME	VARCHAR(100) NOT NULL
); 

SELECT	*
FROM		DEPT_TBL ;

INSERT INTO dept_tbl(DEPT_ID, DEPT_NAME) VALUES
('10', '교육팀'),
('20', '영업팀'),
('30', '힐링팀'),
('40', '레크팀') ;

-- ERROR
INSERT INTO dept_tbl(DEPT_ID, DEPT_NAME) VALUES('50', NULL) ;


-- 외래키 옵션 : 참조무결성 관련 옵션  
-- ON DELETE CASCADE ON DELETE SET NULL , ON UPDATE CASCADE 

DROP TABLE IF EXISTS EMP_TBL ;
CREATE TABLE EMP_TBL(
	EMP_ID 		VARCHAR(20) 	PRIMARY KEY,
	EMP_NAME		VARCHAR(100) 	NOT NULL,
	SALARY 		INT				CHECK( SALARY > 0 ),
	GENDER		CHAR(1)			CHECK( GENDER IN ('F', 'M')),
	JOB_ID		CHAR(3)			NOT NULL, 
	DEPT_ID		CHAR(2)			NOT NULL,
	HIRE_DATE	DATE				DEFAULT SYSDATE(),
	FOREIGN KEY (JOB_ID) 		REFERENCES job_tbl(JOB_ID),
	FOREIGN KEY (DEPT_ID) 		REFERENCES DEPT_tbl(DEPT_ID)
); 

CREATE TABLE EMP_TBL(
	EMP_ID 		VARCHAR(20) 	PRIMARY KEY,
	EMP_NAME		VARCHAR(100) 	NOT NULL,
	SALARY 		INT				CHECK( SALARY > 0 ),
	GENDER		CHAR(1)			CHECK( GENDER IN ('F', 'M')),
	JOB_ID		CHAR(3)			NOT NULL, 
	DEPT_ID		CHAR(2)			NOT NULL
) ;
 

SELECT	* 
FROM	 	emp_tbl ; 

/*
_ci : 대소문자를 구별 X
_cs : 대소문자를 구별 O 
*/

-- ERROR NOT NULL
INSERT INTO EMP_TBL 
VALUES('100', '임정섭', 0, 'F', NULL, NULL); 
 
-- ERROR CHECK  
INSERT INTO EMP_TBL 
VALUES('100', '임정섭', 0, 'F', 'J1', '10'); 

-- ERROR CHECK 
INSERT INTO EMP_TBL 
VALUES('100', '임정섭', 100, '?', 'J1', '10'); 

-- ERROR 
INSERT INTO EMP_TBL 
VALUES('200', '임정섭', 100, 'F', 'J6', '50'); 

-- INSERT OK
INSERT INTO EMP_TBL 
VALUES('300', '임정섭', 100, 'F', 'J5', '40'); 


-- DEFAULT 
INSERT INTO emp_tbl 
VALUES('300', '임정섭', 100, 'F', 'J5', '40', NULL ); 
 
INSERT INTO emp_tbl 
VALUES('400', '임정섭', 100, 'F', 'J5', '40', DEFAULT ); 

INSERT INTO emp_tbl(EMP_ID, EMP_NAME, SALARY, GENDER, JOB_ID, DEPT_ID)  
VALUES('500', '임정섭', 100, 'F', 'J5', '40'); 
 

SHOW INDEX FROM emp_tbl ; 



-- 테이블 생성 후 제약 조건을 추가한다면(ALTER) 
ALTER TABLE emp_tbl 
	ADD CONSTRAINT 
	FOREIGN KEY (JOB_ID) REFERENCES job_tbl(JOB_ID) ; 
	
ALTER TABLE emp_tbl 
	ADD CONSTRAINT 
	FOREIGN KEY (DEPT_ID) REFERENCES DEPT_TBL(DEPT_ID) ; 
	
-- 컬럼 추가 
ALTER TABLE emp_tbl 
	ADD COLUMN HIRE_DATE DATE DEFAULT SYSDATE() ; 
	


CREATE TABLE CUS_TBL(
	CUS_ID		VARCHAR(20) PRIMARY KEY,
	CUS_NAME		VARCHAR(20)	CHECK( CUS_NAME IS NOT NULL),
	CUS_GENDER	CHAR(1) 		CHECK( CUS_GENDER IN('F', 'M'))
);
/*
-- INSERT 구문(서브쿼리 사용가능) 
INSERT INTO TABLE_NAME([COLUMN_LIST]) VALUES([DATA])
주의점) 컬럼 리스트 개수와 데이터의 개수 및 타입은 일치 
*/
INSERT INTO CUS_TBL VALUES('1', '임정섭', 'M');
SELECT	*
FROM		CUS_TBL ;


CREATE TABLE PROD_TBL (
	PROD_ID		INT 			AUTO_INCREMENT PRIMARY KEY,
	PROD_NAME	VARCHAR(20) DEFAULT '라벨없음'	
) ;

INSERT INTO PROD_TBL(PROD_NAME) VALUES('아이패드');
INSERT INTO PROD_TBL(PROD_NAME) VALUES(DEFAULT);

SELECT	*
FROM		PROD_TBL ;


CREATE TABLE ORD_TBL (
	ORD_ID	INT	 			AUTO_INCREMENT, 
	CUS_ID	VARCHAR(20),
	PROD_ID	INT,
	PRIMARY KEY(ORD_ID, CUS_ID, PROD_ID),
	FOREIGN KEY (CUS_ID) REFERENCES CUS_TBL(CUS_ID),
	FOREIGN KEY (PROD_ID) REFERENCES PROD_TBL(PROD_ID)
);


INSERT INTO ORD_TBL(CUS_ID, PROD_ID) VALUES('1',1);
SELECT	*
FROM		ORD_TBL ;

INSERT INTO ORD_TBL(CUS_ID, PROD_ID) VALUES(NULL, NULL);

SELECT	CUS_NAME,
			PROD_NAME
FROM		CUS_TBL	C
JOIN		ORD_TBL 	O ON(C.CUS_ID  = O.CUS_ID)
JOIN		PROD_TBL P ON(P.PROD_ID = O.PROD_ID) ; 

			
SELECT	*
FROM		employee ; 


CREATE VIEW EMP_VIEW 
AS
SELECT	EMP_ID,
			EMP_NAME,
			EMAIL,
			JOB_ID,
			DEPT_ID
FROM		employee ; 

SELECT	*
FROM		EMP_VIEW ; 
 

-- UPDATE 
-- 테이블에 포함된 기존 데이터를 수정(건 수는 달라지지 않음) 
/*
구문형식)

UPDATE 	TABLE_NAME
SET		COLUMN_NAME = VALUE, [COLUMN_NAME = VALUE] 
WHERE		CONDITION ; 

*/
SELECT	*
FROM		employee 
WHERE		EMP_NAME = '심하균';
 

-- 심하균의 직급, 부서, 급여를 성해교의 직급, 부서, 급여로 수정한다면?
UPDATE 	employee
SET		JOB_ID = (	SELECT	JOB_ID
							FROM		employee
							WHERE		EMP_NAME = '성해교'),
			SALARY = (	SELECT	SALARY
							FROM		employee
							WHERE		EMP_NAME = '성해교'),
			DEPT_ID = (	SELECT	DEPT_ID
							FROM		employee
							WHERE		EMP_NAME = '성해교')
WHERE		EMP_NAME = '심하균' ; 

 
SELECT	JOB_ID, SALARY, DEPT_ID
FROM		employee
WHERE		EMP_NAME = '성해교' ;
 

UPDATE 	employee
SET		MARRIAGE = DEFAULT  
WHERE		EMP_NAME = '나승원' ;

 
UPDATE 	employee
SET		DEPT_ID = '40'   
WHERE		EMP_NAME = '한선기' ;
 

-- DELETE : 테이블에 포함된 기존 데이터를 삭제 
-- 행 단위로 삭제되므로 행 수가 달라짐 
-- 참조무결성 주의!!
/*
구문형식)

DELETE [FROM] TABLE_NAME
WHERE		CONDITION ; 
*/

DELETE FROM department 
WHERE		DEPT_ID = 20 ; 
